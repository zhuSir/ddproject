<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xmsmartcity.maintain.dao.EvaluateMapper">
  <resultMap id="BaseResultMap" type="com.xmsmartcity.maintain.pojo.Evaluate">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="fault_info_id" jdbcType="INTEGER" property="faultInfoId" />
    <result column="res_speed" jdbcType="INTEGER" property="resSpeed" />
    <result column="maintain_quality" jdbcType="INTEGER" property="maintainQuality" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="updatetime" jdbcType="TIMESTAMP" property="updatetime" />
    <result column="is_del" jdbcType="INTEGER" property="isDel" />
  </resultMap>
  <sql id="Base_Column_List">
    id, fault_info_id, res_speed, maintain_quality, remark, user_id, createtime, updatetime, 
    is_del
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from evaluate
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="selectAverageNumByFaultUserId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select SUM(res_speed)/COUNT(1)
    from evaluate
    WHERE fault_info_id in 
    	(select fault_info_id from index_user_fault WHERE user_id = #{userId});
  </select>
  
  <select id="selectByRecord" parameterType="com.xmsmartcity.maintain.pojo.Evaluate" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from evaluate
    where 1=1
    <if test="id != null">
    	and id = #{id,jdbcType=INTEGER}
    </if>
    <if test="faultInfoId != null">
    	fault_info_id = #{faultInfoId,jdbcType=INTEGER}
    </if>
  </select>
  
  <select id="selectByFaultInfoId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from evaluate
    where fault_info_id = #{faultInfoId,jdbcType=INTEGER}
    and is_del = 0
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from evaluate
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xmsmartcity.maintain.pojo.Evaluate">
    insert into evaluate (id, fault_info_id, res_speed, 
      maintain_quality, remark, user_id, 
      createtime, updatetime, is_del
      )
    values (#{id,jdbcType=INTEGER}, #{faultInfoId,jdbcType=INTEGER}, #{resSpeed,jdbcType=INTEGER}, 
      #{maintainQuality,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{createtime,jdbcType=TIMESTAMP}, #{updatetime,jdbcType=TIMESTAMP}, #{isDel,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xmsmartcity.maintain.pojo.Evaluate">
    insert into evaluate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="faultInfoId != null">
        fault_info_id,
      </if>
      <if test="resSpeed != null">
        res_speed,
      </if>
      <if test="maintainQuality != null">
        maintain_quality,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
      <if test="updatetime != null">
        updatetime,
      </if>
      <if test="isDel != null">
        is_del,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="faultInfoId != null">
        #{faultInfoId,jdbcType=INTEGER},
      </if>
      <if test="resSpeed != null">
        #{resSpeed,jdbcType=INTEGER},
      </if>
      <if test="maintainQuality != null">
        #{maintainQuality,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xmsmartcity.maintain.pojo.Evaluate">
    update evaluate
    <set>
      <if test="faultInfoId != null">
        fault_info_id = #{faultInfoId,jdbcType=INTEGER},
      </if>
      <if test="resSpeed != null">
        res_speed = #{resSpeed,jdbcType=INTEGER},
      </if>
      <if test="maintainQuality != null">
        maintain_quality = #{maintainQuality,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xmsmartcity.maintain.pojo.Evaluate">
    update evaluate
    set fault_info_id = #{faultInfoId,jdbcType=INTEGER},
      res_speed = #{resSpeed,jdbcType=INTEGER},
      maintain_quality = #{maintainQuality,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      is_del = #{isDel,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!-- 获取异常事项和评分 -->
  <select id="getAbnormalThings" parameterType="map" resultType="map">
 select DISTINCT * from
(  	SELECT DISTINCT    #待接收 报障方提交故障单以后，维保方长时间未接收(项目负责人)
  	'' as avgScore,
	u.`name`,
	u.phone,
	u.head_pic as headPic,
	IFNULL(p.`name`,'')  AS projectName,
	IFNULL(s.`name`,'') AS serviceName,
	IFNULL(p.id,'')  AS projectId,
	IFNULL(f.id,'')  AS faultId,
	0 as abnormalType,
	f.createtime AS compareTime,
CASE WHEN f.`level` = 0 THEN timediff(NOW(),DATE_ADD(f.createtime, INTERVAL 6 HOUR))
ELSE(CASE WHEN f.`level` = 1 THEN TIMEDIFF(NOW(),DATE_ADD(f.createtime, INTERVAL 2 HOUR))
		ELSE(CASE WHEN f.`level` = 2 THEN TIMEDIFF(NOW(),DATE_ADD(f.createtime,INTERVAL 30 MINUTE))
				ELSE 0 END ) 
		END)
END AS overTime
FROM
	fault_info f
LEFT JOIN project p on p.id=f.project_id and p.is_del=0
LEFT JOIN project_user pu on pu.project_id=f.project_id AND pu.is_leader=1 and pu.is_del=0   #查询项目负责人
LEFT JOIN company c on c.id=f.company_id and c.is_del=0
LEFT JOIN `user` u ON pu.user_id=u.id AND u.is_del = 0
LEFT JOIN service_type s on s.project_id=f.project_id and s.is_del = 0
WHERE f.state = 1 AND u.id = #{userId,jdbcType=INTEGER} AND
IF (
	f.`level` = 0,NOW() > DATE_ADD(f.createtime, INTERVAL 6 HOUR),
	IF (
		f.`level` = 1,NOW() > DATE_ADD(f.createtime, INTERVAL 2 HOUR),
		IF (
			f.`level` = 2,NOW() > DATE_ADD(f.createtime,INTERVAL 30 MINUTE),"")
	)
)

UNION   #待处理    维修工程师提交转派／增援申请以后，项目负责人长时间未处理（项目负责人）
(
SELECT 
	'' as avgScore,
	u.`name`,
	u.phone,
	u.head_pic as headPic,
    IFNULL(p.`name`,'')  AS projectName,
	IFNULL(s.`name`,'') AS serviceName,
	IFNULL(p.id,'')  AS projectId,
	IFNULL(f.id,'')  AS faultId,
	0 as abnormalType,
	f.updatetime AS compareTime,
	TIMEDIFF(NOW(),DATE_ADD(f.updatetime,INTERVAL 1 HOUR)) as overTime
FROM fault_info f
LEFT JOIN project p on p.id=f.project_id and p.is_del=0
LEFT JOIN service_type s on s.project_id=f.project_id and s.is_del = 0
LEFT JOIN project_user pu on pu.project_id=f.project_id AND pu.is_leader=1 and pu.is_del=0   #查询项目负责人
LEFT JOIN company c on c.id=f.company_id and c.is_del=0
LEFT JOIN `user` u ON pu.user_id=u.id AND u.is_del = 0
WHERE u.id=#{userId,jdbcType=INTEGER} and f.state=3 and NOW()>DATE_ADD(f.updatetime,INTERVAL 1 HOUR)
)

UNION  #已接收   项目负责人将故障转派至维修工程师，维修工程师长时间未进行处理（维修工程师看到）
(
SELECT 
	'' as avgScore,
	u.`name`,
	u.phone,
	u.head_pic as headPic,
	IFNULL(p.`name`,'')  AS projectName,
	IFNULL(s.`name`,'') AS serviceName,
	IFNULL(p.id,'')  AS projectId,
	IFNULL(f.id,'')  AS faultId,
	0 as abnormalType,
	f.updatetime AS compareTime,
TIMEDIFF(NOW(),DATE_ADD(f.updatetime,INTERVAL 1 HOUR)) as overTime
FROM fault_info f
LEFT JOIN index_user_fault i on i.fault_info_id=f.id and i.is_del=0 and i.type=0
LEFT JOIN project p on p.id=f.project_id and p.is_del=0
LEFT JOIN company c on c.id=f.company_id and c.is_del=0
LEFT JOIN `user` u ON (i.user_id=u.id) AND u.is_del = 0
LEFT JOIN service_type s on s.project_id=f.project_id and s.is_del = 0
WHERE u.id=#{userId,jdbcType=INTEGER} and f.is_del=0 and f.state=4 AND NOW()>DATE_ADD(f.updatetime,INTERVAL 1 HOUR)
)
UNION
(SELECT
	(
	e.res_speed + e.maintain_quality
	) / 2 AS avgScore,
u.`name`,
u.phone,
u.head_pic as headPic,
IFNULL(p.`name`,'')  AS projectName,
IFNULL(s.`name`,'') AS serviceName,
e.createtime AS compareTime,
IFNULL(p.id,'')  AS projectId,
IFNULL(f.id,'')  AS faultId,
1 as abnormalType,
'' as overTime
FROM
	evaluate e
LEFT JOIN fault_info f on e.fault_info_id=f.id AND f.is_del=0    
LEFT JOIN index_user_fault i on i.fault_info_id=f.id and i.is_del=0 and i.type=0 #查询维保人员
LEFT JOIN project p on p.id=f.project_id AND p.is_del=0    #查询项目名称
LEFT JOIN project_user pu on pu.project_id=f.project_id AND pu.is_leader=1 and pu.is_del=0   #查询项目负责人
LEFT JOIN service_type s on s.project_id=f.project_id and s.is_del = 0     #查询服务名称
LEFT JOIN `user` uc on uc.id=i.user_id and uc.is_del=0   
LEFT JOIN company c on c.id=uc.company_id and uc.is_del=0   #查询公司负责人
LEFT JOIN `user` u ON (i.user_id=u.id or pu.user_id=u.id or c.responser_id=u.id) AND u.is_del = 0  
WHERE u.id=u.id=#{userId,jdbcType=INTEGER} and e.is_del=0 and e.id not in(select refer_id from abnormal_records))
) AS cm order by compareTime asc
  </select>
  
  <!-- 维保超时异常事项 -->
  <select id="getAbnormalByTimeout" parameterType="map" resultType="map">
  	select DISTINCT * from
(  	SELECT DISTINCT    #待接收 报障方提交故障单以后，维保方长时间未接收(项目负责人)
  	'' as avgScore,
	u.`name`,
	u.phone,
	u.head_pic as headPic,
	IFNULL(p.`name`,'')  AS projectName,
	IFNULL(s.`name`,'') AS serviceName,
	IFNULL(p.id,'')  AS projectId,
	IFNULL(f.id,'')  AS faultId,
	0 as abnormalType,
	f.createtime AS compareTime,
CASE WHEN f.`level` = 0 THEN timediff(NOW(),DATE_ADD(f.createtime, INTERVAL 6 HOUR))
ELSE(CASE WHEN f.`level` = 1 THEN TIMEDIFF(NOW(),DATE_ADD(f.createtime, INTERVAL 2 HOUR))
		ELSE(CASE WHEN f.`level` = 2 THEN TIMEDIFF(NOW(),DATE_ADD(f.createtime,INTERVAL 30 MINUTE))
				ELSE 0 END ) 
		END)
END AS overTime
FROM
	fault_info f
LEFT JOIN project p on p.id=f.project_id and p.is_del=0
LEFT JOIN project_user pu on pu.project_id=f.project_id AND pu.is_leader=1 and pu.is_del=0   #查询项目负责人
LEFT JOIN company c on c.id=f.company_id and c.is_del=0
LEFT JOIN `user` u ON pu.user_id=u.id AND u.is_del = 0
LEFT JOIN service_type s on s.project_id=f.project_id and s.is_del = 0
WHERE f.state = 1 AND u.id = #{userId,jdbcType=INTEGER} AND
IF (
	f.`level` = 0,NOW() > DATE_ADD(f.createtime, INTERVAL 6 HOUR),
	IF (
		f.`level` = 1,NOW() > DATE_ADD(f.createtime, INTERVAL 2 HOUR),
		IF (
			f.`level` = 2,NOW() > DATE_ADD(f.createtime,INTERVAL 30 MINUTE),"")
	)
)

UNION   #待处理    维修工程师提交转派／增援申请以后，项目负责人长时间未处理（项目负责人）
(
SELECT 
	'' as avgScore,
	u.`name`,
	u.phone,
	u.head_pic as headPic,
    IFNULL(p.`name`,'')  AS projectName,
	IFNULL(s.`name`,'') AS serviceName,
	IFNULL(p.id,'')  AS projectId,
	IFNULL(f.id,'')  AS faultId,
	0 as abnormalType,
	f.updatetime AS compareTime,
	TIMEDIFF(NOW(),DATE_ADD(f.updatetime,INTERVAL 1 HOUR)) as overTime
FROM fault_info f
LEFT JOIN project p on p.id=f.project_id and p.is_del=0
LEFT JOIN service_type s on s.project_id=f.project_id and s.is_del = 0
LEFT JOIN project_user pu on pu.project_id=f.project_id AND pu.is_leader=1 and pu.is_del=0   #查询项目负责人
LEFT JOIN company c on c.id=f.company_id and c.is_del=0
LEFT JOIN `user` u ON pu.user_id=u.id AND u.is_del = 0
WHERE u.id=#{userId,jdbcType=INTEGER} and f.state=3 and NOW()>DATE_ADD(f.updatetime,INTERVAL 1 HOUR)
)

UNION  #已接收   项目负责人将故障转派至维修工程师，维修工程师长时间未进行处理（维修工程师看到）
(
SELECT 
	'' as avgScore,
	u.`name`,
	u.phone,
	u.head_pic as headPic,
	IFNULL(p.`name`,'')  AS projectName,
	IFNULL(s.`name`,'') AS serviceName,
	IFNULL(p.id,'')  AS projectId,
	IFNULL(f.id,'')  AS faultId,
	0 as abnormalType,
	f.updatetime AS compareTime,
TIMEDIFF(NOW(),DATE_ADD(f.updatetime,INTERVAL 1 HOUR)) as overTime
FROM fault_info f
LEFT JOIN index_user_fault i on i.fault_info_id=f.id and i.is_del=0 and i.type=0
LEFT JOIN project p on p.id=f.project_id and p.is_del=0
LEFT JOIN company c on c.id=f.company_id and c.is_del=0
LEFT JOIN `user` u ON (i.user_id=u.id) AND u.is_del = 0
LEFT JOIN service_type s on s.project_id=f.project_id and s.is_del = 0
WHERE u.id=#{userId,jdbcType=INTEGER} and f.is_del=0 and f.state=4 AND NOW()>DATE_ADD(f.updatetime,INTERVAL 1 HOUR))
) as t order by compareTime asc
  </select>
  
  <!-- 首页评分异常 -->
 <select id="getAbnormalByScore" parameterType="map" resultType="map">
SELECT
(
	e.res_speed + e.maintain_quality
) / 2 AS avgScore,
u.`name`,
u.phone,
u.head_pic as headPic,
IFNULL(p.`name`,'')  AS projectName,
IFNULL(s.`name`,'') AS serviceName,
e.createtime AS compareTime,
IFNULL(p.id,'')  AS projectId,
IFNULL(f.id,'')  AS faultId,
1 as abnormalType,
'' as overTime
FROM
	evaluate e
LEFT JOIN fault_info f on e.fault_info_id=f.id AND f.is_del=0    
LEFT JOIN index_user_fault i on i.fault_info_id=f.id and i.is_del=0 and i.type=0 #查询维保人员
LEFT JOIN project p on p.id=f.project_id AND p.is_del=0    #查询项目名称
LEFT JOIN project_user pu on pu.project_id=f.project_id AND pu.is_leader=1 and pu.is_del=0   #查询项目负责人
LEFT JOIN service_type s on s.project_id=f.project_id and s.is_del = 0     #查询服务名称
LEFT JOIN `user` uc on uc.id=i.user_id and uc.is_del=0   
LEFT JOIN company c on c.id=uc.company_id and uc.is_del=0   #查询公司负责人
LEFT JOIN `user` u ON (i.user_id=u.id or pu.user_id=u.id or c.responser_id=u.id) AND u.is_del = 0  
WHERE u.id=u.id=#{userId,jdbcType=INTEGER} and e.is_del=0 and e.id not in(select refer_id from abnormal_records)
order by compareTime asc
  </select>
  
</mapper>